
#타겟 스크립트

public class Rotate : MonoBehaviour
{
    //회전 속도 선언
    [SerializeField]
    float rotatespeed = 50;
    //회전 방향 선정(forward는 왼쪽 방향)
    [SerializeField]
    Vector3 rotateangle = Vector3.forward;

    private void Update()
    {
        //회전 속도 * 회전 방향
        transform.Rotate(rotateangle * rotatespeed * Time.deltaTime);
    }
}

#핀 스폰 스크립트
public class PinSpawner : MonoBehaviour
{
    [Header("Commons")]
    //pinPrifeb선정
    [SerializeField]
    private GameObject pinPrifeb;

    [Header("Stuck Pin")]
    
    [SerializeField]
    private Transform targetTransform;
    [SerializeField]
    private Vector3 targetPosition = Vector3.up * 2;
    [SerializeField]
    private float targetRadius = 0.8f;
    [SerializeField]
    private float pinLength = 1.5f;

    public void SpawnThrowablePin(Vector3 position)
    {
        Instantiate(pinPrifeb,position,Quaternion.identity);
    }
    public void SpawnStuckPin(float angle)
    {
        GameObject clone = Instantiate(pinPrifeb);

        SetInPinStuckToTarget(clone.transform, angle);
    }
    private void SetInPinStuckToTarget(Transform pin,float angle)
    {
        pin.position = Utils.GetPositionFromAngle(targetRadius + pinLength , angle) +targetPosition;
        pin.rotation = Quaternion.Euler(0,0,angle);
        pin.SetParent(targetTransform);
        pin.GetComponent<Pin>().SetInPinStuckToTarget();
    }
}

#스테이지 컨트롤 스크립트
public class StageController : MonoBehaviour
{
    [SerializeField]
    private PinSpawner pinSpawner;
    [SerializeField]
    private int throwablePinCount;
    [SerializeField]                [SerializeField]  //배열로 angle값 넣기
    private int stuckPinCount;      private int[] stuckPinAngles;

    private Vector3 firstTPinPosition = Vector3.down * 2;
    public float TPinDistance { private set; get; } = 1;

    private void Awake()
    {
        for(int i = 0; i < throwablePinCount; i++)
        {
            pinSpawner.SpawnThrowablePin(firstTPinPosition + Vector3.down * TPinDistance * i);
        }
        for(int i = 0;i < stuckPinCount; i++)                   for(int i =0;i < stuckPinCount.Lenght;i++)
        {                                                       {            
            float angle = (360 / stuckPinCount) * i;                pinSpawner.SpawnStuckPin(stuckPinCount[i]);
                                                                }
            pinSpawner.SpawnStuckPin(angle);
        }
    }
}

#핀 스크립트
public class Pin : MonoBehaviour
{
    [SerializeField]
    GameObject square;

    public void StuckPin()
    {
        //square를 보이게하기
        square.SetActive(true);
    }
}
#레디안과 디그리 스크립트
public class Utils
{
    public static Vector3 GetPositionFromAngle(float radius,float angle)
    {
        Vector3 position = Vector3.zero;

        angle = DegreeToRadian(angle);

        position.x = radius * Mathf.Cos(angle);
        position.y = radius * Mathf.Sin(angle);
        return position;
    }
    

    public static float DegreeToRadian(float angle)
    {
        return Mathf.PI * angle / 180;
    }
    public static float RadianToDegree(float angle)
    {
        return angle * (180 / Mathf.PI);
    }
}
